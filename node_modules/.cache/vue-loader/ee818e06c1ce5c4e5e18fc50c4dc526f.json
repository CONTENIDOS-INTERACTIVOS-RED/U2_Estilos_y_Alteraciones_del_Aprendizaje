{"remainingRequest":"/home/runner/work/U2_Estilos_y_Alteraciones_del_Aprendizaje/U2_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Estilos_y_Alteraciones_del_Aprendizaje/U2_Estilos_y_Alteraciones_del_Aprendizaje/src/views/curso/Tema2.vue?vue&type=template&id=97314d3a&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Estilos_y_Alteraciones_del_Aprendizaje/U2_Estilos_y_Alteraciones_del_Aprendizaje/src/views/curso/Tema2.vue","mtime":1751754892786},{"path":"/home/runner/work/U2_Estilos_y_Alteraciones_del_Aprendizaje/U2_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Estilos_y_Alteraciones_del_Aprendizaje/U2_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Estilos_y_Alteraciones_del_Aprendizaje/U2_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Estilos_y_Alteraciones_del_Aprendizaje/U2_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Estilos_y_Alteraciones_del_Aprendizaje/U2_Estilos_y_Alteraciones_del_Aprendizaje/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}